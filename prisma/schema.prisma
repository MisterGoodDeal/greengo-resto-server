generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model EventsUsersAssoc {
  id          Int         @id @default(autoincrement())
  user        Int
  event       Int
  LunchEvents LunchEvents @relation(fields: [event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_assoc_event")
  Users       Users       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_assoc_user")

  @@index([event], map: "fk_assoc_event_idx")
  @@index([user], map: "fk_assoc_user_idx")
}

model FavoriteLunchPlaces {
  id             Int         @id @default(autoincrement())
  fk_user        Int
  fk_lunch_place Int
  LunchPlaces    LunchPlaces @relation(fields: [fk_lunch_place], references: [id], onUpdate: Restrict, map: "fk_lp_flp")
  Users          Users       @relation(fields: [fk_user], references: [id], onUpdate: Restrict, map: "fk_user_flp")

  @@index([fk_lunch_place], map: "fk_lp_flp_idx")
  @@index([fk_user], map: "fk_user_flp_idx")
}

model LunchEvents {
  id               Int                @id @default(autoincrement())
  creator          Int
  group            Int
  place            Int
  date             DateTime           @db.DateTime(0)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  deleted_at       DateTime?          @db.DateTime(0)
  Users            Users              @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_creator")
  LunchGroups      LunchGroups        @relation(fields: [group], references: [id], onUpdate: Restrict, map: "fk_events_group")
  LunchPlaces      LunchPlaces        @relation(fields: [place], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_events_place")
  EventsUsersAssoc EventsUsersAssoc[]

  @@index([group], map: "fk_events_group_idx")
  @@index([place], map: "fk_events_place_idx")
  @@index([creator], map: "fk_events_user_idx")
}

model LunchGroups {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(45)
  image                 String                  @db.Text
  group_key             String?                 @db.VarChar(45)
  fk_user               Int
  created_at            DateTime                @default(now()) @db.DateTime(0)
  updated_at            DateTime                @default(now()) @db.DateTime(0)
  deleted_at            DateTime?               @db.DateTime(0)
  Users                 Users                   @relation(fields: [fk_user], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_launch_groups")
  LunchEvents           LunchEvents[]
  LunchPlaces           LunchPlaces[]
  UsersLauchGroupsAssoc UsersLauchGroupsAssoc[]

  @@index([fk_user], map: "fk_user_launch_groups_idx")
}

model LunchPlaces {
  id                          Int                   @id @default(autoincrement())
  fk_lunch_group              Int
  fk_user                     Int
  fk_country_speciality       Int
  lng                         Float
  lat                         Float
  name                        String                @db.VarChar(255)
  rating                      Float                 @db.Float
  price_range                 Int
  can_bring_reusable_contents Int                   @db.TinyInt
  image                       String                @db.Text
  url                         String?               @db.Text
  created_at                  DateTime              @default(now()) @db.Timestamp(0)
  LunchGroups                 LunchGroups           @relation(fields: [fk_lunch_group], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_lg_lp")
  Users                       Users                 @relation(fields: [fk_user], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_lp")
  FavoriteLunchPlaces         FavoriteLunchPlaces[]
  LunchEvents                 LunchEvents[]
  LunchPlacesComments         LunchPlacesComments[]
  UsersVisitCount             UsersVisitCount[]

  @@index([fk_country_speciality], map: "fk_cs_lp_idx")
  @@index([fk_lunch_group], map: "fk_lg_lp_idx")
  @@index([fk_user], map: "fk_user_lp_idx")
}

model LunchPlacesComments {
  id             Int         @id @default(autoincrement())
  fk_user        Int
  fk_lunch_place Int
  comment        String      @db.Text
  created_at     DateTime    @default(now()) @db.DateTime(0)
  LunchPlaces    LunchPlaces @relation(fields: [fk_lunch_place], references: [id], onUpdate: Restrict, map: "fk_lp_lpc")
  Users          Users       @relation(fields: [fk_user], references: [id], onUpdate: Restrict, map: "fk_user_lpc")

  @@index([fk_lunch_place], map: "fk_lp_lpc_idx")
  @@index([fk_user], map: "fk_user_lpc_idx")
}

model Notifications {
  id       Int                    @id @default(autoincrement())
  token    String                 @db.Text
  platform Notifications_platform
  user     Int
  lang     String                 @db.VarChar(10)
  Users    Users                  @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notifications_user")

  @@index([user], map: "fk_notifications_user_idx")
}

model Users {
  id                    Int                     @id @default(autoincrement())
  firstname             String                  @db.VarChar(45)
  lastname              String                  @db.VarChar(45)
  email                 String                  @db.Text
  password              String                  @db.Text
  profile_picture       String                  @db.Text
  oauth_service         String?                 @db.VarChar(45)
  oauth_service_id      String?                 @db.VarChar(255)
  token                 String                  @db.Text
  created_at            DateTime                @default(now()) @db.DateTime(0)
  updated_at            DateTime                @default(now()) @db.DateTime(0)
  deleted_at            DateTime?               @db.DateTime(0)
  EventsUsersAssoc      EventsUsersAssoc[]
  FavoriteLunchPlaces   FavoriteLunchPlaces[]
  LunchEvents           LunchEvents[]
  LunchGroups           LunchGroups[]
  LunchPlaces           LunchPlaces[]
  LunchPlacesComments   LunchPlacesComments[]
  Notifications         Notifications[]
  UsersLauchGroupsAssoc UsersLauchGroupsAssoc[]
  UsersVisitCount       UsersVisitCount[]
}

model UsersLauchGroupsAssoc {
  id             Int         @id @default(autoincrement())
  fk_user        Int
  fk_lunch_group Int
  LunchGroups    LunchGroups @relation(fields: [fk_lunch_group], references: [id], onUpdate: Restrict, map: "fk_lauch_groups_lga")
  Users          Users       @relation(fields: [fk_user], references: [id], onUpdate: Restrict, map: "fk_users_lga")

  @@index([fk_lunch_group], map: "fk_lauch_groups_lga_idx")
  @@index([fk_user], map: "fk_users_lga_idx")
}

model UsersVisitCount {
  id             Int         @id @default(autoincrement())
  fk_user        Int
  fk_lunch_place Int
  count          Int
  LunchPlaces    LunchPlaces @relation(fields: [fk_lunch_place], references: [id], onUpdate: Restrict, map: "fk_lp_uvc")
  Users          Users       @relation(fields: [fk_user], references: [id], onUpdate: Restrict, map: "fk_user_uvc")

  @@index([fk_lunch_place], map: "fk_lp_uvc_idx")
  @@index([fk_user], map: "fk_user_uvc_idx")
}

enum Notifications_platform {
  ios
  android
}
